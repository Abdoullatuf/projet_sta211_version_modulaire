## Workflow complet de stacking sans refit

import numpy as np
import joblib
import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

def run_complete_stacking_workflow():
    """
    Ex√©cute le workflow complet de stacking sans refit
    """
    print("üöÄ D√âMARRAGE DU WORKFLOW COMPLET DE STACKING")
    print("="*60)
    
    # 1. Test du workflow
    print("\n1Ô∏è‚É£ Test du workflow...")
    try:
        exec(open('modules/modeling/test_stacking_workflow.py').read())
        print("‚úÖ Tests pass√©s")
    except Exception as e:
        print(f"‚ùå Erreur lors des tests : {e}")
        return False
    
    # 2. Stacking KNN
    print("\n2Ô∏è‚É£ Stacking sans refit - KNN...")
    try:
        exec(open('modules/modeling/stacking_no_refit_knn.py').read())
        print("‚úÖ Stacking KNN termin√©")
    except Exception as e:
        print(f"‚ùå Erreur stacking KNN : {e}")
        return False
    
    # 3. Stacking MICE
    print("\n3Ô∏è‚É£ Stacking sans refit - MICE...")
    try:
        exec(open('modules/modeling/stacking_no_refit_mice.py').read())
        print("‚úÖ Stacking MICE termin√©")
    except Exception as e:
        print(f"‚ùå Erreur stacking MICE : {e}")
        return False
    
    # 4. Comparaison
    print("\n4Ô∏è‚É£ Comparaison des r√©sultats...")
    try:
        exec(open('modules/modeling/compare_stacking_no_refit.py').read())
        print("‚úÖ Comparaison termin√©e")
    except Exception as e:
        print(f"‚ùå Erreur comparaison : {e}")
        return False
    
    # 5. R√©sum√©
    print("\n5Ô∏è‚É£ Cr√©ation du r√©sum√©...")
    try:
        exec(open('modules/modeling/stacking_summary.py').read())
        print("‚úÖ R√©sum√© cr√©√©")
    except Exception as e:
        print(f"‚ùå Erreur r√©sum√© : {e}")
        return False
    
    print("\n" + "="*60)
    print("üéâ WORKFLOW COMPLET TERMIN√â AVEC SUCC√àS !")
    print("="*60)
    print("‚úÖ Stacking KNN et MICE ex√©cut√©s")
    print("‚úÖ Comparaisons g√©n√©r√©es")
    print("‚úÖ R√©sum√©s cr√©√©s")
    print("‚úÖ Tous les fichiers sauvegard√©s")
    print("="*60)
    
    return True

def display_final_results():
    """
    Affiche un r√©sum√© final des r√©sultats
    """
    print("\nüìä R√âSUM√â FINAL DES R√âSULTATS")
    print("="*60)
    
    try:
        # Charger les performances
        with open(stacking_dir / "stack_no_refit_knn_performance.json", "r") as f:
            perf_knn = json.load(f)
        
        with open(stacking_dir / "stack_no_refit_mice_performance.json", "r") as f:
            perf_mice = json.load(f)
        
        # Cr√©er un tableau de comparaison
        comparison_data = {
            "M√©thode": ["KNN", "MICE"],
            "F1-Score": [perf_knn["f1_score"], perf_mice["f1_score"]],
            "Pr√©cision": [perf_knn["precision"], perf_mice["precision"]],
            "Rappel": [perf_knn["recall"], perf_mice["recall"]],
            "Seuil optimal": [perf_knn["threshold"], perf_mice["threshold"]]
        }
        
        df_comparison = pd.DataFrame(comparison_data)
        
        print(df_comparison.to_string(index=False, float_format='%.4f'))
        
        # D√©terminer le meilleur
        best_idx = df_comparison["F1-Score"].idxmax()
        best_method = df_comparison.loc[best_idx, "M√©thode"]
        best_f1 = df_comparison.loc[best_idx, "F1-Score"]
        
        print(f"\nüèÜ Meilleur mod√®le : {best_method} (F1 = {best_f1:.4f})")
        
        # Diff√©rences
        f1_diff = abs(perf_knn["f1_score"] - perf_mice["f1_score"])
        print(f"üìä Diff√©rence de F1-score : {f1_diff:.4f}")
        
        if f1_diff < 0.01:
            print("üí° Les deux m√©thodes sont tr√®s similaires")
        elif f1_diff < 0.05:
            print("üí° Diff√©rence mod√©r√©e entre les m√©thodes")
        else:
            print("üí° Diff√©rence notable entre les m√©thodes")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'affichage des r√©sultats : {e}")

def list_generated_files():
    """
    Liste tous les fichiers g√©n√©r√©s
    """
    print("\nüìÅ FICHIERS G√âN√âR√âS")
    print("="*60)
    
    expected_files = [
        "stack_no_refit_knn.joblib",
        "stack_no_refit_mice.joblib",
        "best_thr_stack_no_refit_knn.json",
        "best_thr_stack_no_refit_mice.json",
        "stack_no_refit_knn_performance.json",
        "stack_no_refit_mice_performance.json",
        "comparison_stacking_no_refit.csv",
        "comparison_stacking_no_refit.png",
        "stacking_summary.json",
        "stacking_summary.md"
    ]
    
    existing_files = []
    missing_files = []
    
    for file_name in expected_files:
        file_path = stacking_dir / file_name
        if file_path.exists():
            existing_files.append(file_name)
            file_size = file_path.stat().st_size / 1024  # KB
            print(f"‚úÖ {file_name} ({file_size:.1f} KB)")
        else:
            missing_files.append(file_name)
            print(f"‚ùå {file_name}")
    
    print(f"\nüìä Total : {len(existing_files)}/{len(expected_files)} fichiers g√©n√©r√©s")
    
    if missing_files:
        print(f"‚ö†Ô∏è  Fichiers manquants : {len(missing_files)}")
    else:
        print("üéâ Tous les fichiers sont pr√©sents !")

def provide_next_steps():
    """
    Fournit les prochaines √©tapes
    """
    print("\nüéØ PROCHAINES √âTAPES")
    print("="*60)
    
    print("1Ô∏è‚É£ Pour faire des pr√©dictions finales :")
    print("   from modules.modeling.final_predictions_stacking import make_final_predictions")
    print("   results_df, model_info = make_final_predictions(X_test, stacking_dir, output_dir)")
    
    print("\n2Ô∏è‚É£ Pour charger un mod√®le sp√©cifique :")
    print("   from modules.modeling.load_and_use_stacking_no_refit import load_stacking_no_refit_knn")
    print("   stack_model, threshold = load_stacking_no_refit_knn(stacking_dir)")
    
    print("\n3Ô∏è‚É£ Pour analyser les r√©sultats :")
    print("   - Consultez stacking_summary.md pour la documentation")
    print("   - Regardez comparison_stacking_no_refit.png pour les graphiques")
    print("   - V√©rifiez les m√©triques dans les fichiers JSON")
    
    print("\n4Ô∏è‚É£ Pour le rapport final :")
    print("   - Utilisez les r√©sultats du meilleur mod√®le")
    print("   - Documentez la m√©thodologie de stacking")
    print("   - Comparez avec les mod√®les individuels")

# Ex√©cution du workflow complet
if __name__ == "__main__":
    print("üöÄ WORKFLOW COMPLET DE STACKING SANS REFIT")
    print("="*60)
    
    # Ex√©cuter le workflow
    success = run_complete_stacking_workflow()
    
    if success:
        # Afficher les r√©sultats
        display_final_results()
        
        # Lister les fichiers
        list_generated_files()
        
        # Prochaines √©tapes
        provide_next_steps()
        
        print("\n" + "="*60)
        print("üéâ WORKFLOW TERMIN√â AVEC SUCC√àS !")
        print("="*60)
    else:
        print("\n‚ùå Le workflow a √©chou√©")
        print("V√©rifiez les erreurs ci-dessus") 