# =============================================================================
# EXEMPLE D'UTILISATION DU MODULE DE STACKING
# =============================================================================

# Import du module
from modules.modeling.stacking_models_creator import create_stacking_models, get_stacking_models_info

# =============================================================================
# OPTION 1 : CRÃ‰ER LES MODÃˆLES POUR KNN ET MICE
# =============================================================================

print("ðŸŽ¯ OPTION 1 : CrÃ©ation des modÃ¨les pour KNN et MICE")
print("=" * 60)

# CrÃ©er tous les modÃ¨les (KNN + MICE)
models = create_stacking_models(imputation_method="both", verbose=True)

# Afficher les informations sur les modÃ¨les crÃ©Ã©s
get_stacking_models_info(models)

# =============================================================================
# OPTION 2 : CRÃ‰ER SEULEMENT LES MODÃˆLES KNN
# =============================================================================

print("\n" + "=" * 60)
print("ðŸŽ¯ OPTION 2 : CrÃ©ation des modÃ¨les KNN seulement")
print("=" * 60)

# CrÃ©er seulement les modÃ¨les KNN
models_knn = create_stacking_models(imputation_method="knn", verbose=True)

# =============================================================================
# OPTION 3 : CRÃ‰ER SEULEMENT LES MODÃˆLES MICE
# =============================================================================

print("\n" + "=" * 60)
print("ðŸŽ¯ OPTION 3 : CrÃ©ation des modÃ¨les MICE seulement")
print("=" * 60)

# CrÃ©er seulement les modÃ¨les MICE
models_mice = create_stacking_models(imputation_method="mice", verbose=True)

# =============================================================================
# UTILISATION DES MODÃˆLES CRÃ‰Ã‰S
# =============================================================================

print("\n" + "=" * 60)
print("ðŸŽ¯ UTILISATION DES MODÃˆLES")
print("=" * 60)

# Exemple d'utilisation avec les modÃ¨les crÃ©Ã©s
if "stacking_classifier_knn" in models:
    print("\nðŸ“Š Utilisation du modÃ¨le KNN :")
    print("   # EntraÃ®ner le modÃ¨le")
    print("   models['stacking_classifier_knn'].fit(X_train_knn, y_train_knn)")
    print("   ")
    print("   # Faire des prÃ©dictions")
    print("   y_pred_knn = models['stacking_classifier_knn'].predict(X_val_knn)")
    print("   ")
    print("   # Ã‰valuer les performances")
    print("   from sklearn.metrics import f1_score")
    print("   f1_knn = f1_score(y_val_knn, y_pred_knn)")
    print("   print(f'F1 KNN: {f1_knn:.4f}')")

if "stacking_classifier_mice" in models:
    print("\nðŸ“Š Utilisation du modÃ¨le MICE :")
    print("   # EntraÃ®ner le modÃ¨le")
    print("   models['stacking_classifier_mice'].fit(X_train_mice, y_train_mice)")
    print("   ")
    print("   # Faire des prÃ©dictions")
    print("   y_pred_mice = models['stacking_classifier_mice'].predict(X_val_mice)")
    print("   ")
    print("   # Ã‰valuer les performances")
    print("   f1_mice = f1_score(y_val_mice, y_pred_mice)")
    print("   print(f'F1 MICE: {f1_mice:.4f}')")

print("\n" + "=" * 60)
print("âœ… MODULE PRÃŠT POUR L'UTILISATION !")
print("=" * 60)

print("\nðŸ“‹ Variables disponibles dans 'models' :")
for key in models.keys():
    if 'stacking_classifier' in key:
        print(f"   ðŸ”¹ {key} : ModÃ¨le de stacking prÃªt Ã  l'entraÃ®nement")
    elif 'params' in key:
        print(f"   ðŸ”¹ {key} : ParamÃ¨tres optimisÃ©s")
    else:
        print(f"   ðŸ”¹ {key} : ModÃ¨le de base")

print("\nðŸŽ¯ Pour utiliser dans votre notebook :")
print("   from modules.modeling.stacking_models_creator import create_stacking_models")
print("   models = create_stacking_models(imputation_method='both')")
print("   stacking_knn = models['stacking_classifier_knn']")
print("   stacking_mice = models['stacking_classifier_mice']") 