# modules/config/config_setup.py

"""
Module de configuration simplifi√©e pour le projet STA211.
G√®re la cr√©ation, validation et export de la configuration projet.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, Any

def setup_project_configuration(project_name: str, version: str, author: str, 
                               paths: Dict, random_state: int = 42, 
                               verbose: bool = True) -> Dict[str, Any]:
    """
    Configure automatiquement le projet STA211 avec optimisation F1-score.
    
    Args:
        project_name: Nom du projet
        version: Version du projet
        author: Auteur du projet
        paths: Dictionnaire des chemins
        random_state: Graine al√©atoire
        verbose: Affichage d√©taill√©
        
    Returns:
        Dict: Configuration compl√®te et variables export√©es
    """
    
    if verbose:
        print("‚öôÔ∏è Configuration automatis√©e du projet STA211...")
    
    try:
        from config.project_config import ProjectConfig, create_config
        if verbose:
            print("‚úÖ Module project_config import√©")
    except ImportError as e:
        if verbose:
            print(f"‚ùå Erreur import project_config : {e}")
        raise
    
    # ========================================================================
    # CR√âATION DE LA CONFIGURATION DE BASE
    # ========================================================================
    
    config = create_config(
        project_name=project_name,
        version=version,
        author=author,
        paths=paths
    )
    
    if verbose:
        print("‚úÖ Configuration de base cr√©√©e")
    
    # ========================================================================
    # OPTIMISATIONS F1-SCORE ET DATASET
    # ========================================================================
    
    # Configuration F1-score
    f1_config = {
        "PROJECT_CONFIG.SCORING": "f1",
        "PROJECT_CONFIG.SCORING_METRICS": ["f1", "roc_auc", "precision", "recall"],
        "PROJECT_CONFIG.PRIMARY_METRIC": "f1",
        "PROJECT_CONFIG.CROSS_VALIDATION": True,
        "PROJECT_CONFIG.CV_FOLDS": 5,
        "MODEL_CONFIG.class_weight": "balanced",
        "MODEL_CONFIG.stratify": True
    }
    
    # Configuration dataset Internet Advertisements
    dataset_config = {
        "PROJECT_CONFIG.EXPECTED_TRAIN_SIZE": 2459,
        "PROJECT_CONFIG.EXPECTED_TEST_SIZE": 820,
        "PROJECT_CONFIG.EXPECTED_FEATURES": 1558,
        "PROJECT_CONFIG.CLASS_IMBALANCE_RATIO": 6.15,
        "PIPELINE_CONFIG.handle_imbalance": True,
        "PIPELINE_CONFIG.correlation_threshold": 0.95
    }
    
    # Application des configurations
    all_updates = {**f1_config, **dataset_config}
    
    for key, value in all_updates.items():
        config.update(key, value)
    
    if verbose:
        print("üéØ Optimisation F1-score appliqu√©e")
        print("üìä Configuration dataset appliqu√©e")
    
    # ========================================================================
    # VALIDATION DE LA CONFIGURATION
    # ========================================================================
    
    critical_configs = [
        ("M√©trique primaire", "PROJECT_CONFIG.PRIMARY_METRIC"),
        ("Seuil corr√©lation", "PIPELINE_CONFIG.correlation_threshold"),
        ("Class weight", "MODEL_CONFIG.class_weight"),
        ("CV folds", "PROJECT_CONFIG.CV_FOLDS")
    ]
    
    config_valid = True
    
    for description, config_path in critical_configs:
        try:
            value = config.get(config_path)
            if verbose:
                print(f"  ‚úÖ {description}: {value}")
        except Exception as e:
            if verbose:
                print(f"  ‚ùå {description}: Erreur - {e}")
            config_valid = False
    
    if not config_valid:
        raise ValueError("Configuration invalide d√©tect√©e")
    
    # ========================================================================
    # SAUVEGARDE ROBUSTE
    # ========================================================================
    
    if verbose:
        print("\nüíæ Sauvegarde de la configuration...")
    
    config_saved = False
    config_file = None
    
    try:
        # Tentative sauvegarde normale
        config_dir = Path(paths["ROOT_DIR"]) / "config"
        config_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        config_file = config_dir / f"project_config_v{version}_{timestamp}.json"
        
        config.save_config(str(config_file))
        config_saved = True
        
        if verbose:
            print(f"‚úÖ Configuration sauvegard√©e : {config_file}")
            
    except Exception as e:
        if verbose:
            print(f"‚ö†Ô∏è Sauvegarde normale √©chou√©e : {e}")
            print("üí° Sauvegarde manuelle...")
        
        # Sauvegarde manuelle
        try:
            config_data = {
                "project_info": {
                    "name": project_name,
                    "version": version,
                    "author": author,
                    "timestamp": datetime.now().isoformat()
                },
                "f1_optimization": {
                    "primary_metric": config.get("PROJECT_CONFIG.PRIMARY_METRIC"),
                    "scoring_metrics": config.get("PROJECT_CONFIG.SCORING_METRICS"),
                    "class_weight": config.get("MODEL_CONFIG.class_weight"),
                    "cv_folds": config.get("PROJECT_CONFIG.CV_FOLDS")
                },
                "dataset_config": {
                    "correlation_threshold": config.get("PIPELINE_CONFIG.correlation_threshold"),
                    "handle_imbalance": config.get("PIPELINE_CONFIG.handle_imbalance"),
                    "expected_train_size": config.get("PROJECT_CONFIG.EXPECTED_TRAIN_SIZE")
                }
            }
            
            config_file_manual = config_dir / f"project_config_manual_v{version}.json"
            with open(config_file_manual, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            config_saved = True
            config_file = config_file_manual
            
            if verbose:
                print(f"‚úÖ Sauvegarde manuelle r√©ussie : {config_file}")
                
        except Exception as e2:
            if verbose:
                print(f"‚ùå Sauvegarde manuelle √©chou√©e : {e2}")
    
    # ========================================================================
    # EXPORT DES VARIABLES
    # ========================================================================
    
    config_exports = {
        'PROJECT_CONFIG': config.PROJECT_CONFIG,
        'COLUMN_CONFIG': config.COLUMN_CONFIG,
        'VIZ_CONFIG': config.VIZ_CONFIG,
        'MODEL_CONFIG': config.MODEL_CONFIG,
        'PIPELINE_CONFIG': config.PIPELINE_CONFIG,
        'SAVE_PATHS': config.SAVE_PATHS,
        'F1_OPTIMIZATION': config.F1_OPTIMIZATION,
        'config': config
    }
    
    # ========================================================================
    # R√âSUM√â
    # ========================================================================
    
    if verbose:
        print(f"\nüìã R√©sum√© de la configuration :")
        print(f"  üéØ M√©trique cible     : {config.get('PROJECT_CONFIG.PRIMARY_METRIC')}")
        print(f"  üî¢ Random State      : {random_state}")
        print(f"  üìä Seuil corr√©lation : {config.get('PIPELINE_CONFIG.correlation_threshold')}")
        print(f"  ‚öñÔ∏è Gestion d√©s√©quilibre : {config.get('PIPELINE_CONFIG.handle_imbalance')}")
        print(f"  üíæ Config sauvegard√©e : {config_saved}")
        print(f"  üåç Variables export√©es : {len(config_exports)}")
        
        print(f"\n‚úÖ Configuration compl√®te et pr√™te")
    
    return config_exports


def quick_project_config(project_name: str, version: str, author: str, paths: Dict,
                        random_state: int = 42) -> Dict[str, Any]:
    """Configuration rapide et silencieuse."""
    return setup_project_configuration(
        project_name=project_name,
        version=version, 
        author=author,
        paths=paths,
        random_state=random_state,
        verbose=True
    )


def validate_required_variables(**kwargs) -> bool:
    """Valide que toutes les variables requises sont pr√©sentes."""
    
    required = ['project_name', 'version', 'author', 'paths']
    missing = [var for var in required if var not in kwargs or kwargs[var] is None]
    
    if missing:
        raise NameError(f"Variables requises manquantes : {missing}")
    
    return True